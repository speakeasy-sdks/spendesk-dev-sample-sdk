/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * Always `S256`
 */
export enum CodeChallengeMethod {
    S256 = "S256",
}

/**
 * Always `code`
 */
export enum ResponseType {
    Code = "code",
}

export class GetAuthorizeRequest extends SpeakeasyBase {
    /**
     * `client_id` provided by Spendesk
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=client_id" })
    clientId: string;

    /**
     * The client should locally generate a `secret` (AKA `code_verifier`), that at this initial stage of the OAuth2 flow should be passed as a `code_challenge` in the format of `base64url(sha256(secret))`. Check https://www.oauth.com/playground/authorization-code-with-pkce.html for an example.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=code_challenge" })
    codeChallenge: string;

    /**
     * Always `S256`
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=code_challenge_method" })
    codeChallengeMethod: CodeChallengeMethod;

    /**
     * URI to redirect the user after connection is authorized. If successful, the redirect URL will look like: `{redirect_uri}?code={auth_code}&state={state}`, where `code` is the authorization code to be used in `POST /token/create`, and `state` allows you to verify the integrity of the connection.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=redirect_uri" })
    redirectUri: string;

    /**
     * Always `code`
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=response_type" })
    responseType: ResponseType;

    /**
     * Space separated list of requested scopes
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=scope" })
    scope: string;

    /**
     * This string will be sent back at the end of the OAuth2 flow, so that whoever starts the flow can double-check that the same variable is being returned (and there has been no tampering)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
    state?: string;
}

export class GetAuthorizeResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
