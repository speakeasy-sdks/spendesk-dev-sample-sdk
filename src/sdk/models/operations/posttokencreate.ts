/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export enum PostTokenCreateGrantType {
    AuthorizationCode = "authorization_code",
}

export class PostTokenCreateRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "client_id" })
    clientId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "client_secret" })
    clientSecret: string;

    /**
     * The authorization code set on the redirect URL on the way back from connecting on Spendesk
     */
    @SpeakeasyMetadata()
    @Expose({ name: "code" })
    code: string;

    /**
     * This code verifier should match the `base64url(sha256(secret))` (AKA `code_challenge`) of the random `secret` you sent when starting the OAuth2 PCKE flow
     */
    @SpeakeasyMetadata()
    @Expose({ name: "code_verifier" })
    codeVerifier: string;

    @SpeakeasyMetadata()
    @Expose({ name: "grant_type" })
    grantType: PostTokenCreateGrantType;

    /**
     * This URI must match the URI used in the `/authorize` endpoint
     */
    @SpeakeasyMetadata()
    @Expose({ name: "redirect_uri" })
    redirectUri: string;
}

export enum TokenType {
    Bearer = "Bearer",
}

/**
 * Created
 */
export class PostTokenCreateResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "access_token" })
    accessToken: string;

    @SpeakeasyMetadata()
    @Expose({ name: "refresh_token" })
    refreshToken: string;

    /**
     * space separated list of granted scopes
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    scope: string;

    @SpeakeasyMetadata()
    @Expose({ name: "token_type" })
    tokenType: TokenType;
}

export class PostTokenCreateResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Created
     */
    @SpeakeasyMetadata()
    object?: PostTokenCreateResponseBody;
}
