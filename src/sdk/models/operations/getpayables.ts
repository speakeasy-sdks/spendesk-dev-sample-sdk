/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetPayablesSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=oauth2;name=Authorization" })
    authorizationCodeFlow?: string;

    @SpeakeasyMetadata({ data: "security, scheme=true;type=oauth2;name=Authorization" })
    clientAuthFlow?: string;
}

export enum BookkeepingStatus {
    Created = "created",
    Prepared = "prepared",
    Unprepared = "unprepared",
    Exported = "exported",
    FailedToExport = "failedToExport",
    ExportedManually = "exportedManually",
}

export class GetPayablesRequest extends SpeakeasyBase {
    /**
     * Status of payables
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=bookkeepingStatus" })
    bookkeepingStatus?: BookkeepingStatus[];

    /**
     * Internal reference for pagination purposes
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cursor" })
    cursor?: string;

    /**
     * The date and time this payable was exported to accounting
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=exportedAfter" })
    exportedAfter?: Date;

    /**
     * An array of payable IDs
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=ids" })
    ids?: string[];

    /**
     * Sorting order: + (asc) or - (desc) by `payableDate` or `createdAt`
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: string;
}

export class Pagination extends SpeakeasyBase {
    /**
     * Next URL to get the next page of a multi-page response.
     *
     * @remarks
     * When `nextUrl` is `null` you are on the last page of the reponse.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nextUrl" })
    nextUrl: string;
}

export class Meta extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "pagination" })
    @Type(() => Pagination)
    pagination: Pagination;
}

/**
 * OK
 */
export class GetPayablesResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: shared.Payable })
    @Expose({ name: "data" })
    @Type(() => shared.Payable)
    data: shared.Payable[];

    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    @Type(() => Meta)
    meta: Meta;
}

export class GetPayablesResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    object?: GetPayablesResponseBody;
}
