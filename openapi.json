{
    "openapi":"3.1.0",
    "info":{
       "title":"Spendesk Public API",
       "version":"0.1",
       "summary":"Spendesk Public API",
       "description":"Spendesk Public API - Alpha",
       "contact":{
          "email":"support-public-api@spendesk.com",
          "url":"https://developer.spendesk.com/",
          "name":"Spendesk for Developers"
       },
       "termsOfService":"https://www.spendesk.com/en/legals/terms/"
    },
    "servers":[
       {
          "url":"https://sandbox-public-api.spendesk.com",
          "description":"Sandbox"
       },
       {
          "url":"https://public-api.spendesk.com",
          "description":"Production"
       }
    ],
    "paths":{
       "/v0/payables":{
          "get":{
             "summary":"Get payables",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "type":"object",
                                  "required":[
                                     "pagination"
                                  ],
                                  "properties":{
                                     "pagination":{
                                        "type":"object",
                                        "required":[
                                           "nextUrl"
                                        ],
                                        "properties":{
                                           "nextUrl":{
                                              "type":"string",
                                              "description":"Next URL to get the next page of a multi-page response.\nWhen `nextUrl` is `null` you are on the last page of the reponse."
                                           }
                                        }
                                     }
                                  }
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "$ref":"#/components/schemas/Payable"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         },
                         "examples":{
                            
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-payables",
             "parameters":[
                {
                   "$ref":"#/components/parameters/cursor"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"ids",
                   "description":"An array of payable IDs",
                   "style":"form",
                   "explode":false
                },
                {
                   "schema":{
                      "type":"string",
                      "format":"date-time"
                   },
                   "in":"query",
                   "name":"exportedAfter",
                   "description":"The date and time this payable was exported to accounting"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string",
                         "enum":[
                            "created",
                            "prepared",
                            "unprepared",
                            "exported",
                            "failedToExport",
                            "exportedManually"
                         ]
                      },
                      "minItems":0,
                      "maxItems":6
                   },
                   "in":"query",
                   "name":"bookkeepingStatus",
                   "description":"Status of payables",
                   "style":"form",
                   "explode":true
                },
                {
                   "schema":{
                      "type":"string",
                      "example":"-createdAt,+payableDate"
                   },
                   "in":"query",
                   "name":"sort",
                   "description":"Sorting order: + (asc) or - (desc) by `payableDate` or `createdAt`"
                }
             ],
             "description":"GET payables endpoint",
             "tags":[
                "Spend Data"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/settlements":{
          "get":{
             "summary":"Get settlements",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "$ref":"#/components/schemas/Settlement"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-settlements",
             "description":"Get settlements",
             "parameters":[
                {
                   "schema":{
                      "type":"string",
                      "format":"date-time"
                   },
                   "in":"query",
                   "name":"exportedAfter",
                   "description":"The date and time the settlement first got exported to accounting"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string",
                         "enum":[
                            "spendeskAccount",
                            "externalAccount"
                         ]
                      },
                      "default":[
                         "spendeskAccount"
                      ],
                      "minItems":0,
                      "maxItems":2
                   },
                   "in":"query",
                   "name":"paidFrom",
                   "description":"Bank account used for the settlement",
                   "style":"form",
                   "explode":true
                },
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"ids",
                   "description":"An array of settlement IDs"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string",
                         "enum":[
                            "created",
                            "exported",
                            "failedToExport"
                         ]
                      },
                      "minItems":0,
                      "maxItems":3
                   },
                   "in":"query",
                   "name":"state",
                   "description":"Status of settlements to be returned",
                   "style":"form",
                   "explode":true
                },
                {
                   "schema":{
                      "type":"string",
                      "example":"+createdAt"
                   },
                   "in":"query",
                   "name":"sort",
                   "description":"Sort by creation date"
                }
             ],
             "tags":[
                "Spend Data"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/bank-fees":{
          "get":{
             "summary":"Get bank fees",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "description":"The list of bank fees",
                                  "items":{
                                     "$ref":"#/components/schemas/BankFee"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         },
                         "examples":{
                            "Success":{
                               "value":{
                                  "meta":{
                                     "pagination":{
                                        "page":0,
                                        "pageSize":0,
                                        "total":0
                                     }
                                  },
                                  "data":[
                                     {
                                        "id":"497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                        "kind":"fxFee",
                                        "settlementId":"b4887549-5aec-4adc-bf32-5fb69ede72ea",
                                        "amount":0,
                                        "currency":"string",
                                        "createdAt":"2019-08-24T14:15:22Z",
                                        "chargedAt":"2019-08-24T14:15:22Z",
                                        "state":"created"
                                     }
                                  ]
                               }
                            }
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-bank-fees",
             "description":"Returns a list of bank fees",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"string",
                      "format":"date-time"
                   },
                   "in":"query",
                   "name":"from",
                   "description":"Start date of the requested period"
                },
                {
                   "schema":{
                      "type":"string",
                      "format":"date-time"
                   },
                   "in":"query",
                   "name":"to",
                   "description":"End date of the requested period"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"settlementIds",
                   "description":"Settlement ID"
                },
                {
                   "schema":{
                      "type":"string",
                      "example":"+createdAt"
                   },
                   "in":"query",
                   "name":"sort",
                   "description":"Sort by creation date"
                }
             ],
             "tags":[
                "Spend Data"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/wallet-loads":{
          "get":{
             "summary":"Get wallet loads",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "$ref":"#/components/schemas/WalletLoad"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-wallet-loads",
             "description":"Get wallet loads",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"string",
                      "format":"date-time"
                   },
                   "in":"query",
                   "name":"from",
                   "description":"Start date of the requested period"
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"to",
                   "description":"End date of the requested period"
                },
                {
                   "schema":{
                      "type":"string",
                      "example":"+createdAt"
                   },
                   "in":"query",
                   "name":"sort",
                   "description":"Sort by creation date"
                }
             ],
             "tags":[
                "Spend Data"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/wallet-summaries":{
          "get":{
             "summary":"Get wallet summaries",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "$ref":"#/components/schemas/WalletSummary"
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-wallet-summary",
             "description":"Get wallet summary",
             "tags":[
                "Spend Data"
             ],
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"ids",
                   "description":"An array of wallet IDs"
                }
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/users":{
          "get":{
             "summary":"Get users of the company",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "$ref":"#/components/schemas/User"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "description":"Too Many Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-users",
             "description":"Get users of the company",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"id",
                   "description":"User ID"
                }
             ],
             "tags":[
                "Suppliers and Users"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/suppliers":{
          "get":{
             "summary":"Get suppliers",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "$ref":"#/components/schemas/Supplier"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-suppliers",
             "description":"Get suppliers",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"id",
                   "description":"Supplier ID"
                }
             ],
             "tags":[
                "Suppliers and Users"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/analytical-fields":{
          "get":{
             "summary":"Get analytical fields",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"object",
                                  "required":[
                                     "id",
                                     "name",
                                     "isArchived"
                                  ],
                                  "properties":{
                                     "id":{
                                        "type":"string"
                                     },
                                     "name":{
                                        "type":"string"
                                     },
                                     "isArchived":{
                                        "type":"string"
                                     }
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-analytical-fields",
             "description":"Get analytical fields",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"string",
                      "format":"string"
                   },
                   "in":"query",
                   "name":"id",
                   "description":"Field ID"
                },
                {
                   "schema":{
                      "type":"boolean"
                   },
                   "in":"query",
                   "name":"includeArchived",
                   "description":"Include deleted fields"
                }
             ],
             "tags":[
                "Accounts"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/analytical-fields/{fieldId}/values":{
          "get":{
             "summary":"Get analytical values",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"object",
                                  "required":[
                                     "id",
                                     "value",
                                     "isArchived"
                                  ],
                                  "properties":{
                                     "id":{
                                        "type":"string"
                                     },
                                     "value":{
                                        "type":"string"
                                     },
                                     "isArchived":{
                                        "type":"string"
                                     }
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-analytical-values",
             "description":"Get analytical values",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"boolean"
                   },
                   "in":"query",
                   "name":"includeArchived",
                   "description":"Include deleted values"
                }
             ],
             "tags":[
                "Accounts"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             {
                "schema":{
                   "type":"string"
                },
                "name":"fieldId",
                "in":"path",
                "required":true,
                "description":"Analytical field ID"
             }
          ]
       },
       "/v0/employee-accounts":{
          "get":{
             "summary":"Get employee accounts",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "$ref":"#/components/schemas/EmployeeAccount"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-employee-accounts",
             "description":"GET employee accounts",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"ids",
                   "description":"An array of employee IDs"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"memberIds",
                   "description":"An array of member IDs"
                }
             ],
             "tags":[
                "Accounts"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/supplier-accounts":{
          "get":{
             "summary":"Get supplier accounts",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "$ref":"#/components/schemas/SupplierAccount"
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-supplier-accounts",
             "description":"GET supplier accounts",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"ids",
                   "description":"An array of supplier IDs"
                },
                {
                   "schema":{
                      "type":"boolean"
                   },
                   "in":"query",
                   "name":"includeArchived",
                   "description":"Boolean to include archived suppliers. If set to false or not set, the default will not include archived suppliers."
                }
             ],
             "tags":[
                "Accounts"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/cost-centers":{
          "get":{
             "summary":"Get cost centers",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"string",
                                           "description":"Cost center ID"
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of cost center"
                                        },
                                        "owner":{
                                           "type":"string",
                                           "description":"Cost center owner ID"
                                        },
                                        "coOwners":{
                                           "type":"array",
                                           "description":"Cost center co-owner ID",
                                           "items":{
                                              "type":"string"
                                           }
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "name",
                                        "owner",
                                        "coOwners"
                                     ]
                                  }
                               }
                            },
                            "required":[
                               "meta",
                               "data"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-cost-centers",
             "description":"Get cost centers",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"ids",
                   "description":"An array of cost center IDs"
                }
             ],
             "tags":[
                "Accounts"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/expense-categories":{
          "get":{
             "summary":"Get expense categories",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "type":"array",
                                  "items":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"string",
                                           "description":"Expense category ID"
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of expense category"
                                        },
                                        "costCenters":{
                                           "type":"array",
                                           "description":"Array of cost centers",
                                           "items":{
                                              "type":"object",
                                              "properties":{
                                                 "id":{
                                                    "type":"string",
                                                    "description":"Cost center ID"
                                                 },
                                                 "name":{
                                                    "type":"string",
                                                    "description":"Name of cost center"
                                                 }
                                              },
                                              "required":[
                                                 "id",
                                                 "name"
                                              ]
                                           }
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "name",
                                        "costCenters"
                                     ]
                                  }
                               }
                            }
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-expense-categories",
             "description":"Get expense categories",
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                },
                {
                   "schema":{
                      "type":"array",
                      "items":{
                         "type":"string"
                      }
                   },
                   "in":"query",
                   "name":"ids",
                   "description":"An array of expense category IDs"
                }
             ],
             "tags":[
                "Accounts"
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/payables/{payableId}/attachments":{
          "parameters":[
             {
                "schema":{
                   "type":"string"
                },
                "name":"payableId",
                "in":"path",
                "required":true,
                "description":"Payable ID"
             }
          ],
          "get":{
             "summary":"Get payables attachments",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "meta":{
                                  "$ref":"#/components/schemas/Pagination"
                               },
                               "data":{
                                  "$ref":"#/components/schemas/Attachment"
                               }
                            }
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "404":{
                   "$ref":"#/components/responses/Not-Found"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-payable-attachments",
             "description":"Get attachments",
             "tags":[
                "Spend Data"
             ],
             "parameters":[
                {
                   "$ref":"#/components/parameters/page"
                },
                {
                   "$ref":"#/components/parameters/pageSize"
                }
             ],
             "security":[
                {
                   "Client_auth_flow":[
                      
                   ]
                },
                {
                   "Authorization_code_flow":[
                      
                   ]
                }
             ]
          }
       },
       "/v0/auth/token":{
          "post":{
             "summary":"Create access token",
             "operationId":"post-access-token",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "access_token":{
                                  "type":"string"
                               },
                               "token_type":{
                                  "type":"string",
                                  "description":"`Bearer`"
                               }
                            },
                            "required":[
                               "access_token",
                               "token_type"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "description":"Create access token",
             "security":[
                
             ],
             "parameters":[
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"header",
                   "name":"authorization",
                   "description":"Should contain \"Basic \" followed by base64 encoded `client_id:client_secret`",
                   "required":true
                }
             ],
             "requestBody":{
                "content":{
                   "application/json":{
                      "schema":{
                         "type":"object",
                         "properties":{
                            "grant_type":{
                               "description":"OAuth2 grant type: `client_credentials`",
                               "enum":[
                                  "client_credentials"
                               ],
                               "default":"client_credentials"
                            },
                            "scope":{
                               "type":"string",
                               "description":"Optional field to restrict the scope of the token. The default scope will match the scope defined in the front end when generating your API client id and secret.\n\nSpace separated list of available scopes:\n`bank-fee:read` `payable:read` `payable-attachment:read` `settlement:read` `wallet-load:read` `wallet-summary:read` `user:read` `supplier:read` `analytical-field:read`",
                               "example":"bank-fee:read payable:read payable-attachment:read settlement:read wallet-load:read wallet-summary:read user:read supplier:read analytical-field:read"
                            }
                         }
                      }
                   }
                },
                "description":""
             },
             "tags":[
                "Authentication"
             ]
          },
          "parameters":[
             
          ]
       },
       "/v0/oauth2/authorize":{
          "get":{
             "summary":"Request authorization",
             "tags":[
                "OAuth2"
             ],
             "responses":{
                "302":{
                   "description":"redirect to {spendesk_frontend}?id={token_id}&code={auth_code}"
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "operationId":"get-authorize",
             "description":"Request user authorization for an OAuth2 connection",
             "parameters":[
                {
                   "schema":{
                      "type":"string",
                      "enum":[
                         "code"
                      ]
                   },
                   "in":"query",
                   "name":"response_type",
                   "required":true,
                   "description":"Always `code`"
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"client_id",
                   "required":true,
                   "description":"`client_id` provided by Spendesk"
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"redirect_uri",
                   "required":true,
                   "description":"URI to redirect the user after connection is authorized. If successful, the redirect URL will look like: `{redirect_uri}?code={auth_code}&state={state}`, where `code` is the authorization code to be used in `POST /token/create`, and `state` allows you to verify the integrity of the connection."
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"scope",
                   "description":"Space separated list of requested scopes",
                   "required":true
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"state",
                   "description":"This string will be sent back at the end of the OAuth2 flow, so that whoever starts the flow can double-check that the same variable is being returned (and there has been no tampering)"
                },
                {
                   "schema":{
                      "type":"string"
                   },
                   "in":"query",
                   "name":"code_challenge",
                   "description":"The client should locally generate a `secret` (AKA `code_verifier`), that at this initial stage of the OAuth2 flow should be passed as a `code_challenge` in the format of `base64url(sha256(secret))`. Check https://www.oauth.com/playground/authorization-code-with-pkce.html for an example.",
                   "required":true
                },
                {
                   "schema":{
                      "type":"string",
                      "enum":[
                         "S256"
                      ]
                   },
                   "in":"query",
                   "name":"code_challenge_method",
                   "required":true,
                   "description":"Always `S256`"
                }
             ],
             "security":[
                
             ],
             "x-internal":false
          },
          "parameters":[
             
          ]
       },
       "/v0/oauth2/token/create":{
          "post":{
             "summary":"Request access token",
             "operationId":"post-token-create",
             "responses":{
                "201":{
                   "description":"Created",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "token_type":{
                                  "enum":[
                                     "Bearer"
                                  ]
                               },
                               "access_token":{
                                  "type":"string"
                               },
                               "scope":{
                                  "type":"string",
                                  "description":"space separated list of granted scopes\n"
                               },
                               "refresh_token":{
                                  "type":"string"
                               }
                            },
                            "required":[
                               "token_type",
                               "access_token",
                               "scope",
                               "refresh_token"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "tags":[
                "OAuth2"
             ],
             "description":"Request access token with an authorization code",
             "security":[
                
             ],
             "requestBody":{
                "content":{
                   "application/json":{
                      "schema":{
                         "type":"object",
                         "properties":{
                            "grant_type":{
                               "type":"string",
                               "enum":[
                                  "authorization_code"
                               ]
                            },
                            "client_id":{
                               "type":"string"
                            },
                            "client_secret":{
                               "type":"string"
                            },
                            "redirect_uri":{
                               "type":"string",
                               "description":"This URI must match the URI used in the `/authorize` endpoint"
                            },
                            "code":{
                               "type":"string",
                               "description":"The authorization code set on the redirect URL on the way back from connecting on Spendesk"
                            },
                            "code_verifier":{
                               "type":"string",
                               "description":"This code verifier should match the `base64url(sha256(secret))` (AKA `code_challenge`) of the random `secret` you sent when starting the OAuth2 PCKE flow"
                            }
                         },
                         "required":[
                            "grant_type",
                            "client_id",
                            "client_secret",
                            "redirect_uri",
                            "code",
                            "code_verifier"
                         ]
                      }
                   }
                }
             },
             "x-internal":false
          },
          "parameters":[
             
          ]
       },
       "/v0/oauth2/token/refresh":{
          "post":{
             "summary":"Refresh access token",
             "operationId":"post-token-refresh",
             "responses":{
                "200":{
                   "description":"OK",
                   "content":{
                      "application/json":{
                         "schema":{
                            "type":"object",
                            "properties":{
                               "token_type":{
                                  "enum":[
                                     "Bearer"
                                  ]
                               },
                               "access_token":{
                                  "type":"string"
                               },
                               "scope":{
                                  "type":"string",
                                  "description":"space separated list of granted scopes\n"
                               },
                               "refresh_token":{
                                  "type":"string"
                               }
                            },
                            "required":[
                               "token_type",
                               "access_token",
                               "scope",
                               "refresh_token"
                            ]
                         }
                      }
                   }
                },
                "400":{
                   "$ref":"#/components/responses/Bad-Request"
                },
                "401":{
                   "$ref":"#/components/responses/Authentication-Error"
                },
                "403":{
                   "$ref":"#/components/responses/Forbidden"
                },
                "429":{
                   "$ref":"#/components/responses/Too-Many-Requests"
                },
                "500":{
                   "$ref":"#/components/responses/Internal-Server-Error"
                }
             },
             "tags":[
                "OAuth2"
             ],
             "description":"Request a new access token with a refresh token",
             "security":[
                
             ],
             "requestBody":{
                "content":{
                   "application/json":{
                      "schema":{
                         "type":"object",
                         "properties":{
                            "grant_type":{
                               "type":"string",
                               "enum":[
                                  "refresh_token"
                               ]
                            },
                            "refresh_token":{
                               "type":"string"
                            }
                         },
                         "required":[
                            "grant_type",
                            "refresh_token"
                         ]
                      }
                   },
                   "application/xml":{
                      "schema":{
                         "type":"object",
                         "properties":{
                            
                         }
                      }
                   }
                }
             },
             "x-internal":false
          },
          "parameters":[
             
          ]
       }
    },
    "components":{
       "schemas":{
          "AnalyticalValue":{
             "title":"AnalyticalValue",
             "type":"object",
             "properties":{
                "fieldId":{
                   "type":"string",
                   "description":"ID of field"
                },
                "fieldName":{
                   "type":"string",
                   "description":"Field name"
                },
                "valueId":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"ID of value"
                },
                "valueName":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Value name"
                }
             },
             "required":[
                "fieldId",
                "fieldName",
                "valueId",
                "valueName"
             ]
          },
          "Attachment":{
             "title":"Attachment",
             "type":"object",
             "properties":{
                "mimeType":{
                   "type":"string",
                   "enum":[
                      "image/png",
                      "image/jpg",
                      "image/jpeg",
                      "application/pdf"
                   ],
                   "description":"Media type of the attachment."
                },
                "checksum":{
                   "type":"string",
                   "description":"A file checksum is like a unique digital fingerprint that helps ensure a file hasn’t been tampered with during transfer or storage, providing data integrity and security assurance.",
                   "example":"13299d084ef2bddf35668af333d2b19cb"
                },
                "attachedAt":{
                   "type":"string",
                   "format":"date-time",
                   "description":"The date-time the attachment was added."
                },
                "url":{
                   "type":"string",
                   "description":"URL to download attachment",
                   "example":"www.examplespendesk.com"
                }
             },
             "required":[
                "mimeType",
                "attachedAt",
                "url"
             ]
          },
          "BankFee":{
             "title":"BankFee",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "format":"uuid",
                   "description":"ID of bank fee"
                },
                "kind":{
                   "type":"string",
                   "enum":[
                      "fxFee",
                      "atmFee",
                      "otherFee"
                   ],
                   "description":"`fxFee` refers to fees incurred by a payment in foreign currency,\n and `atmFee` refers to fees incurred at an atm, e.g. to withdraw cash."
                },
                "settlementId":{
                   "type":"string",
                   "description":"The id of the Settlement related to this bank fee.",
                   "format":"uuid"
                },
                "amount":{
                   "type":"integer",
                   "description":"Amount of the fee, always in wallet currency.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                },
                "currency":{
                   "type":"string",
                   "maxLength":255,
                   "description":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html)."
                },
                "createdAt":{
                   "type":"string",
                   "description":"The date-time the bank fee got created in the system",
                   "format":"date-time"
                },
                "chargedAt":{
                   "type":"string",
                   "description":"Date and time the bank fee was incurred",
                   "format":"date-time"
                }
             },
             "required":[
                "id",
                "kind",
                "settlementId",
                "amount",
                "currency",
                "createdAt",
                "chargedAt"
             ]
          },
          "EmployeeAccount":{
             "title":"EmployeeAccount",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "description":"Account ID"
                },
                "name":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Account name (if exists)"
                },
                "description":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Account description (if exists)"
                },
                "generalAccountCode":{
                   "type":"string",
                   "description":"Account code"
                },
                "auxiliaryAccountCode":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Auxiliary account code (if exists)"
                },
                "defaultFor":{
                   "nullable":true,
                   "enum":[
                      "employees",
                      null
                   ],
                   "description":"An account can be set as default for all employees"
                },
                "memberIds":{
                   "type":"array",
                   "description":"The ids of the users assigned to the account",
                   "items":{
                      "type":"string"
                   }
                }
             },
             "required":[
                "id",
                "name",
                "description",
                "generalAccountCode",
                "auxiliaryAccountCode",
                "defaultFor",
                "memberIds"
             ],
             "description":""
          },
          "Error":{
             "title":"Error",
             "type":"object",
             "properties":{
                "errors":{
                   "type":[
                      "array"
                   ],
                   "items":{
                      "type":"object",
                      "properties":{
                         "code":{
                            "type":"string",
                            "description":"Readable error message that could be displayed in a UI"
                         },
                         "detail":{
                            "type":"string",
                            "description":"Further description provided to give wider context into the error"
                         },
                         "source":{
                            "type":"string",
                            "description":"Optional: Known source of error such as missing or invalid field in a request"
                         }
                      },
                      "required":[
                         "code",
                         "detail"
                      ]
                   }
                }
             }
          },
          "Pagination":{
             "title":"Pagination",
             "type":"object",
             "properties":{
                "pagination":{
                   "type":"object",
                   "properties":{
                      "page":{
                         "type":"integer"
                      },
                      "pageSize":{
                         "type":"integer"
                      },
                      "total":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "page",
                      "pageSize",
                      "total"
                   ]
                }
             }
          },
          "Payable":{
             "title":"Payable",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "description":"The unique identifier of the payable (UUID format)",
                   "format":"uuid"
                },
                "type":{
                   "type":"string",
                   "enum":[
                      "expenseClaim",
                      "invoicePurchase",
                      "creditNote",
                      "singlePurchaseCard",
                      "mileageAllowance",
                      "perDiemAllowance",
                      "subscriptionCard",
                      "physicalCard",
                      "reverseBill"
                   ],
                   "description":"Indicates the type of the payable. \n\nType | Description |\n---------|----------|\n `expenseClaim` | An expense claim submitted and approved | \n `invoicePurchase` | An invoice to pay submitted and approved | \n `creditNote` | A credit note submitted and approved |\n  `singlePurchaseCard` | A purchase made with a single-use virtual card |\n  `subscriptionCard` | A purchase made with a subscription virtual card |\n  `physicalCard` | A purchase made with a physical card |\n  `mileageAllowance` | A mileage expense submitted and approved |\n  `perDiemAllowance` | A per diem expense submitted and approved |\n  `reverseBill` | A refund or a late return (aka cash return) |"
                },
                "userId":{
                   "type":"string",
                   "description":"The ID of the Spendesk user who submitted the payable",
                   "maxLength":255,
                   "example":"hr2cquaats043c"
                },
                "bookkeepingStatus":{
                   "type":"string",
                   "enum":[
                      "created",
                      "prepared",
                      "exported",
                      "failedToExport",
                      "exportedManually",
                      "unprepared"
                   ],
                   "description":"Status of the payable in the Spendesk flow. \n\n| Status | Description |\n| ---|--- |\n| `created` | Payable (approved expense) has been created |\n| `prepared` | Payable has been prepared (enriched with accounting information) by an accountant |\n| `exported` | Payable has been exported to accounting |\n| `failedToExport` | Payable has failed to export to accounting via a native Spendesk integrations |\n| `exportedManually` | Payable has been marked as exported manually by the accountant |\n| `unprepared` | Payable has been sent back to Bookkeep>Prepare |\n"
                },
                "companyId":{
                   "type":"string",
                   "description":"The ID of the company (this could be a wallet or an entity)",
                   "maxLength":255,
                   "example":"uoiwo-a--b97to"
                },
                "costCenterId":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Id of cost center"
                },
                "costCenterName":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Cost center name"
                },
                "teamId":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"The ID of the team",
                   "maxLength":255
                },
                "teamName":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"The name of the team"
                },
                "createdAt":{
                   "type":"string",
                   "format":"date-time",
                   "description":"The date-time the payable got created in the system"
                },
                "payableDate":{
                   "type":"string",
                   "description":"For expenses - this is the date of the expense.\nFor reversals - this is the date of the reversal.\nIn YYYY-MM-DD format.",
                   "format":"date"
                },
                "accountingDate":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"This feature is not activated by default.\nIf activated, `accounting date` field allows accountants to override the original expense date. \nIn YYYY-MM-DD format.\n",
                   "format":"date"
                },
                "invoiceDueDate":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"The date the invoice is due. \nIn YYYY-MM-DD format.",
                   "format":"date"
                },
                "amount":{
                   "type":"integer",
                   "description":"If the payment was made in a foreign currency, this amount will be the one in the payment currency.\nCan contain a negative value (for refunds).\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                },
                "currency":{
                   "type":"string",
                   "description":"If the payment was made in a foreign currency, this amount will be the one in the payment currency.\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html)."
                },
                "functionalAmount":{
                   "type":"integer",
                   "description":"If the payment was made in a foreign currency, this amount will be the one in the wallet currency.\nCan contain a negative value (for refunds).\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                },
                "functionalCurrency":{
                   "type":"string",
                   "description":"If the payment was made in a foreign currency, this amount will be the one in the wallet currency.\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html)."
                },
                "functionalExchangeRate":{
                   "type":"number",
                   "description":"If the payment was made in a foreign currency, this will be the exchange rate that was applied when the payment was made."
                },
                "invoiceNumber":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Invoice number if available"
                },
                "creditNoteNumber":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Credit Note number if available"
                },
                "referenceInvoiceNumber":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Invoice number of an invoice that resulted in a credit note. "
                },
                "description":{
                   "type":"string",
                   "description":"Payable description"
                },
                "exportedAt":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"The date this payable was first exported via an accounting export. [ISO 8601 date format](https://www.iso.org/iso-8601-date-and-time-format.html)",
                   "format":"date-time"
                },
                "counterparty":{
                   "type":"object",
                   "description":"A payable is due to either a supplier or an employee",
                   "required":[
                      "id",
                      "type",
                      "name",
                      "accountPayable"
                   ],
                   "properties":{
                      "id":{
                         "type":"string",
                         "maxLength":255,
                         "format":"uuid",
                         "description":"ID of counterparty"
                      },
                      "type":{
                         "type":"string",
                         "enum":[
                            "supplier",
                            "employee"
                         ],
                         "description":"Type `employee` or `supplier`"
                      },
                      "name":{
                         "type":"string",
                         "description":"Supplier or Employee name"
                      },
                      "accountPayable":{
                         "type":[
                            "object",
                            "null"
                         ],
                         "required":[
                            "id",
                            "generalAccountCode",
                            "auxiliaryAccountCode"
                         ],
                         "properties":{
                            "id":{
                               "type":"string",
                               "format":"uuid",
                               "description":"Internal Spendesk ID of the account payable"
                            },
                            "generalAccountCode":{
                               "type":"string",
                               "description":"Accounting code of the account payable"
                            },
                            "auxiliaryAccountCode":{
                               "type":[
                                  "string",
                                  "null"
                               ],
                               "description":"Auxiliary code of the account payable, if available"
                            }
                         }
                      }
                   }
                },
                "lineItems":{
                   "type":"array",
                   "description":"Line items of the payable",
                   "items":{
                      "type":"object",
                      "properties":{
                         "expenseAccount":{
                            "type":"object",
                            "description":"Expense account this line item is allocated to",
                            "required":[
                               "id",
                               "code",
                               "description"
                            ],
                            "properties":{
                               "id":{
                                  "type":"string",
                                  "format":"uuid",
                                  "description":"Expense account Spendesk internal ID"
                               },
                               "code":{
                                  "type":"string",
                                  "description":"Expense account accounting code"
                               },
                               "description":{
                                  "type":"string",
                                  "description":"Expense account description"
                               }
                            }
                         },
                         "vatAccount":{
                            "type":"object",
                            "description":"VAT account this line item is allocated to",
                            "required":[
                               "id",
                               "code",
                               "description",
                               "rate"
                            ],
                            "properties":{
                               "id":{
                                  "type":"string",
                                  "format":"uuid",
                                  "description":"VAT account Spendesk internal ID"
                               },
                               "code":{
                                  "type":"string",
                                  "description":"VAT account accounting code"
                               },
                               "description":{
                                  "type":[
                                     "string",
                                     "null"
                                  ],
                                  "description":"VAT account description"
                               },
                               "rate":{
                                  "type":"number",
                                  "description":"VAT account rate in percent (e.g. 19.2%)"
                               }
                            }
                         },
                         "financial":{
                            "type":"object",
                            "description":"Financial amounts of the line item",
                            "required":[
                               "vatAmount",
                               "vatAdjustementAmount",
                               "netAmount",
                               "grossAmount"
                            ],
                            "properties":{
                               "vatAmount":{
                                  "type":"integer",
                                  "description":"Amount of VAT calculated automatically or entered manually by the accountant.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                               },
                               "vatAdjustementAmount":{
                                  "type":"integer",
                                  "description":"Only exists when `vatAmount` was manually adjusted by the accountant.\nIs calculated as `vatAmount` - (`netAmount` * `vatAccount.rate`) and can be negative or positive.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                               },
                               "netAmount":{
                                  "type":"integer",
                                  "description":"Net amount or the line iteam (`grossAmount` - `vatAmount`)\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                               },
                               "grossAmount":{
                                  "type":"integer",
                                  "description":"Gross amount of the line item (`netAmount` + `vatAmount`)\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                               }
                            }
                         }
                      },
                      "required":[
                         "expenseAccount",
                         "vatAccount",
                         "financial"
                      ]
                   }
                },
                "analyticalProperties":{
                   "type":"array",
                   "description":"Analytical fields and values on the payable",
                   "items":{
                      "$ref":"#/components/schemas/AnalyticalValue"
                   }
                },
                "allocations":{
                   "type":"array",
                   "description":"An array of allocations for the payable. A payable can have a settlement or a reversal allocated to it",
                   "items":{
                      "type":"object",
                      "properties":{
                         "allocatedAmount":{
                            "type":"integer",
                            "description":"Payable amount allocated to settlements and bank fees.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                         },
                         "settlement":{
                            "type":"object",
                            "required":[
                               "id",
                               "link"
                            ],
                            "properties":{
                               "id":{
                                  "type":"string",
                                  "format":"uuid",
                                  "description":"Settlement Id"
                               },
                               "link":{
                                  "type":"string",
                                  "description":"Link to settlement endpoint with the relevant `ids` query parameter",
                                  "example":"/settlements?ids[]=3fa85f64-5717-4562-b3fc-2c963f66afa6"
                               }
                            }
                         }
                      },
                      "required":[
                         "allocatedAmount",
                         "settlement"
                      ]
                   }
                },
                "documentaryEvidence":{
                   "type":"object",
                   "required":[
                      "notProvided",
                      "provided"
                   ],
                   "properties":{
                      "notProvided":{
                         "type":[
                            "object",
                            "null"
                         ],
                         "description":"Not `null` only when no documentary evidence or justification has been provided",
                         "required":[
                            "reason",
                            "reportMethod",
                            "reporterId"
                         ],
                         "properties":{
                            "reason":{
                               "type":"string",
                               "description":"Reason selected for not providing documentary evidence\n"
                            },
                            "reportMethod":{
                               "type":"string",
                               "description":"Marked as unable to provide documentary evidence: manually or automatically\n"
                            },
                            "reporterId":{
                               "type":[
                                  "string",
                                  "null"
                               ],
                               "description":"The user ID that reported as unable to provide documentary evidence\n",
                               "maxLength":255
                            }
                         }
                      },
                      "provided":{
                         "type":[
                            "object",
                            "null"
                         ],
                         "description":"Only `null` when no documentary evidence or justification has been provided",
                         "required":[
                            "type",
                            "valid",
                            "notValidReason"
                         ],
                         "properties":{
                            "type":{
                               "type":"string",
                               "enum":[
                                  "creditNote",
                                  "invoice",
                                  "mileageEntry",
                                  "perDiemEntry",
                                  "declarationOfMissingInvoice",
                                  "declarationOfMissingCreditNote"
                               ],
                               "description":"The type of documentary evidence provided"
                            },
                            "valid":{
                               "type":"boolean",
                               "description":"`false` if documentary evidence has been declared invalid by the accoutant"
                            },
                            "notValidReason":{
                               "type":[
                                  "string",
                                  "null"
                               ],
                               "description":"The reason why documentary evidence has been declared invalid"
                            }
                         }
                      }
                   }
                },
                "links":{
                   "type":"array",
                   "items":{
                      "type":"object",
                      "properties":{
                         "attachments":{
                            "type":"string",
                            "description":"Link to attachments endpoint with the relevant `payableId`",
                            "example":"/paybles/3fa85f64-5717-4562-b3fc-2c963f66afa6/attachments"
                         }
                      },
                      "required":[
                         "attachments"
                      ]
                   }
                }
             },
             "required":[
                "id",
                "type",
                "userId",
                "bookkeepingStatus",
                "companyId",
                "costCenterId",
                "costCenterName",
                "teamId",
                "teamName",
                "createdAt",
                "payableDate",
                "accountingDate",
                "invoiceDueDate",
                "amount",
                "currency",
                "functionalAmount",
                "functionalCurrency",
                "functionalExchangeRate",
                "invoiceNumber",
                "creditNoteNumber",
                "referenceInvoiceNumber",
                "description",
                "exportedAt",
                "counterparty",
                "lineItems",
                "analyticalProperties",
                "allocations",
                "documentaryEvidence",
                "links"
             ]
          },
          "Settlement":{
             "title":"Settlement",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "format":"uuid",
                   "description":"Settlement Id"
                },
                "type":{
                   "type":"string",
                   "enum":[
                      "payment",
                      "refund",
                      "advance",
                      "cashReturn",
                      "chargeBack",
                      "reimbursement"
                   ],
                   "description":"Type | Description\n---------|----------\n `payment` |  A payment\n `refund` |  A refund\n `advance` | A cash advance\n  `cashReturn` | A cash return\n  `chargeBack` |  A card disputes/chargeback"
                },
                "medium":{
                   "type":"string",
                   "enum":[
                      "card",
                      "wireTransfer"
                   ],
                   "description":"Medium: `card` or `wireTransfer`"
                },
                "paidFrom":{
                   "type":"string",
                   "enum":[
                      "spendeskAccount",
                      "externalAccount"
                   ],
                   "description":"The bank account the wire transfer is emitted from (Spendesk or external).\nFor card payments the value is always `spendeskAccount`"
                },
                "transactionDescription":{
                   "type":"string",
                   "example":"Auth: PAPERTRAIL INC.,PORTLAND,USA",
                   "description":"Description of transaction"
                },
                "createdAt":{
                   "type":"string",
                   "description":"The date-time the settlement got created in the system",
                   "format":"date-time"
                },
                "clearedAt":{
                   "type":"string",
                   "format":"date-time",
                   "description":"Date-time that the transaction cleared. [ISO 8601 date format](https://www.iso.org/iso-8601-date-and-time-format.html)"
                },
                "amount":{
                   "type":"integer",
                   "description":"If the payment was made in a foreign currency, this amount is in the foreign currency.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY).",
                   "example":-1500
                },
                "currency":{
                   "type":"string",
                   "description":"If the payment was made in a foreign currency, this is the foreign currency.\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                   "maxLength":255,
                   "example":"USD"
                },
                "billingAmount":{
                   "type":"integer",
                   "description":"Amount is in the account's currency.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY).",
                   "example":851
                },
                "billingCurrency":{
                   "type":"string",
                   "description":"Amount is in the account's currency.\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                   "maxLength":255,
                   "example":"EUR"
                },
                "billingExchangeRate":{
                   "type":[
                      "number",
                      "null"
                   ],
                   "description":"If the payment was made in a foreign currency, this is the exchange rate between the two currencies at the time of the payment.",
                   "example":-0.5673333333
                },
                "state":{
                   "type":"string",
                   "enum":[
                      "created",
                      "exported",
                      "failedToExport"
                   ],
                   "description":"Status of the settlement:\n\nState | Description \n---------|----------\n `created` | Created but not exported \n `exported` | Exported \n `failedToExport` | Tried to export but failed \n"
                },
                "exportedAt":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "format":"date-time",
                   "description":"Date-time settlement was exported at"
                },
                "links":{
                   "type":"array",
                   "items":{
                      "type":"object",
                      "properties":{
                         "bankFees":{
                            "type":"string",
                            "example":"/bank-fees?settlementIds=3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            "description":"Link to bank fees endpoint with the relevant `settlementId` query parameter"
                         }
                      },
                      "required":[
                         "bankFees"
                      ]
                   }
                }
             },
             "required":[
                "id",
                "type",
                "medium",
                "paidFrom",
                "transactionDescription",
                "createdAt",
                "clearedAt",
                "amount",
                "currency",
                "billingAmount",
                "billingCurrency",
                "billingExchangeRate",
                "state",
                "exportedAt",
                "links"
             ]
          },
          "Supplier":{
             "title":"Supplier",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "maxLength":255
                },
                "name":{
                   "type":"string"
                }
             },
             "required":[
                "id",
                "name"
             ]
          },
          "SupplierAccount":{
             "title":"SupplierAccount",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "description":"Account ID"
                },
                "name":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Accout name (if exists)"
                },
                "generalAccountCode":{
                   "type":"string",
                   "description":"Account code"
                },
                "auxiliaryAccountCode":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "description":"Auxiliary account code (if exists)"
                },
                "defaultFor":{
                   "description":"Supplier accounts can be set as deafult account payable for card purchases and/or for invoice",
                   "type":"array",
                   "items":{
                      "enum":[
                         "cards",
                         "invoices"
                      ]
                   }
                },
                "suppliers":{
                   "type":"array",
                   "description":"Array of suppliers having this account assigned",
                   "items":{
                      "type":"object",
                      "properties":{
                         "id":{
                            "type":"string",
                            "description":"Supplier ID"
                         },
                         "name":{
                            "type":"string",
                            "description":"Supplier name"
                         }
                      },
                      "required":[
                         "id",
                         "name"
                      ]
                   }
                }
             },
             "required":[
                "id",
                "name",
                "generalAccountCode",
                "auxiliaryAccountCode",
                "defaultFor",
                "suppliers"
             ]
          },
          "User":{
             "title":"User",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "format":"uuid"
                },
                "firstName":{
                   "type":"string",
                   "example":"John",
                   "maxLength":255
                },
                "lastName":{
                   "type":"string",
                   "example":"Doe",
                   "maxLength":255
                },
                "email":{
                   "type":[
                      "string",
                      "null"
                   ],
                   "example":"john.doe@example.com",
                   "maxLength":255
                }
             },
             "required":[
                "id",
                "firstName",
                "lastName",
                "email"
             ]
          },
          "WalletLoad":{
             "title":"WalletLoad",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "format":"uuid",
                   "description":"ID of wallet"
                },
                "type":{
                   "type":"string",
                   "enum":[
                      "card",
                      "wireTransfer"
                   ],
                   "description":"Type of wallet load"
                },
                "currency":{
                   "type":"string",
                   "description":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                   "example":"EUR"
                },
                "amount":{
                   "type":"integer",
                   "description":"Amount of the wallet load. Always in wallet currency.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                },
                "createdAt":{
                   "type":"string",
                   "description":"The date-time the wallet load got created in the system",
                   "format":"date-time"
                }
             },
             "required":[
                "id",
                "type",
                "currency",
                "amount",
                "createdAt"
             ]
          },
          "WalletSummary":{
             "title":"WalletSummary",
             "type":"object",
             "properties":{
                "id":{
                   "type":"string",
                   "example":"uoiwo-a--b97to",
                   "description":"Id of wallet"
                },
                "name":{
                   "type":"string",
                   "description":"Name of wallet",
                   "example":"UK_Wallet"
                },
                "status":{
                   "enum":[
                      "active"
                   ],
                   "description":"Status of wallet"
                },
                "currency":{
                   "type":"string",
                   "example":"EUR",
                   "description":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html)."
                },
                "totalAmount":{
                   "type":"integer",
                   "description":"The total amount currently loaded on the wallet. This does not include amounts on pre-paid cards. Card settlements can be delayed in which case totalAmount may differ from (wallet loads - sum of settlements).\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                },
                "totalAvailableAmount":{
                   "type":"integer",
                   "description":"The total amount currently available for spend\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                },
                "totalAllocatedAmount":{
                   "type":"integer",
                   "description":"The total amount allocated on cards & scheduled transfers\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                },
                "allocatedOnCards":{
                   "type":"object",
                   "required":[
                      "subscriptionAmount",
                      "physicalAmount",
                      "singlePurchaseAmount",
                      "totalAllocatedAmount"
                   ],
                   "properties":{
                      "subscriptionAmount":{
                         "type":"integer",
                         "description":"Amount allocated on card to subscription.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                      },
                      "physicalAmount":{
                         "type":"integer",
                         "description":"Amount allocated on card to physical.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                      },
                      "singlePurchaseAmount":{
                         "type":"integer",
                         "description":"Amount allocated on card to single purchase.\n"
                      },
                      "totalAllocatedAmount":{
                         "type":"integer",
                         "description":"Total amount allocated on card.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                      }
                   }
                },
                "scheduledTransfersAmount":{
                   "type":"object",
                   "required":[
                      "scheduledExpenseClaimsAmount",
                      "scheduledInvoicesAmount",
                      "totalScheduledTransfersAmount"
                   ],
                   "properties":{
                      "scheduledExpenseClaimsAmount":{
                         "type":"integer",
                         "description":"Amount allocated to scheduled transfers.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                      },
                      "scheduledInvoicesAmount":{
                         "type":"integer",
                         "description":"Amount allocated to scheduled transfers.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                      },
                      "totalScheduledTransfersAmount":{
                         "type":"integer",
                         "description":"Amount allocated to scheduled transfers.\nExpressed in smallest units of the currency (e.g. cents for EUR and USD, but yen for JPY)."
                      }
                   }
                }
             },
             "required":[
                "id",
                "name",
                "status",
                "currency",
                "totalAmount",
                "totalAvailableAmount",
                "totalAllocatedAmount",
                "allocatedOnCards",
                "scheduledTransfersAmount"
             ]
          }
       },
       "parameters":{
          "cursor":{
             "name":"cursor",
             "in":"query",
             "required":false,
             "schema":{
                "type":"string"
             },
             "description":"Internal reference for pagination purposes"
          },
          "page":{
             "name":"page",
             "in":"query",
             "required":false,
             "schema":{
                "type":"integer",
                "minimum":1,
                "default":1
             },
             "description":"Page number"
          },
          "pageSize":{
             "name":"pageSize",
             "in":"query",
             "required":false,
             "schema":{
                "type":"integer",
                "minimum":1,
                "maximum":100,
                "default":30
             },
             "description":"Page size"
          }
       },
       "responses":{
          "Bad-Request":{
             "description":"Bad request",
             "content":{
                "application/json":{
                   "schema":{
                      "$ref":"#/components/schemas/Error"
                   },
                   "examples":{
                      "Incorrect or missing field":{
                         "value":{
                            "errors":[
                               {
                                  "code":"BAD_REQUEST_INCORRECT_OR_MISSING_FIELD",
                                  "detail":"There is a validation error with incorrect field in request body. Please fix and repeat your request.",
                                  "source":"bookkeepingStatus"
                               }
                            ]
                         }
                      }
                   }
                }
             }
          },
          "Authentication-Error":{
             "description":"Authentication error",
             "content":{
                "application/json":{
                   "schema":{
                      "$ref":"#/components/schemas/Error"
                   },
                   "examples":{
                      "Unauthorised":{
                         "value":{
                            "errors":[
                               {
                                  "code":"AUTHENTICATION_ERROR",
                                  "detail":"No valid access token has been provided in your request."
                               }
                            ]
                         }
                      }
                   }
                }
             }
          },
          "Forbidden":{
             "description":"Forbidden",
             "content":{
                "application/json":{
                   "schema":{
                      "$ref":"#/components/schemas/Error"
                   },
                   "examples":{
                      "Forbidden":{
                         "value":{
                            "errors":[
                               {
                                  "code":"FORBIDDEN_ERROR",
                                  "detail":"Access to the requested resource is forbidden."
                               }
                            ]
                         }
                      }
                   }
                }
             }
          },
          "Not-Found":{
             "description":"Not found",
             "content":{
                "application/json":{
                   "schema":{
                      "$ref":"#/components/schemas/Error"
                   },
                   "examples":{
                      "Not found":{
                         "value":{
                            "errors":[
                               {
                                  "code":"NOT_FOUND",
                                  "detail":"The requested resource cannot be found."
                               }
                            ]
                         }
                      }
                   }
                }
             }
          },
          "Too-Many-Requests":{
             "description":"Too many requests",
             "content":{
                "application/json":{
                   "schema":{
                      "$ref":"#/components/schemas/Error"
                   },
                   "examples":{
                      "Too many requests ":{
                         "value":{
                            "errors":[
                               {
                                  "code":"TOO_MANY_REQUESTS",
                                  "detail":"Too many requests have been received too quickly."
                               }
                            ]
                         }
                      }
                   }
                }
             }
          },
          "Internal-Server-Error":{
             "description":"Example response",
             "content":{
                "application/json":{
                   "schema":{
                      "$ref":"#/components/schemas/Error"
                   },
                   "examples":{
                      "Internal server error":{
                         "value":{
                            "errors":[
                               {
                                  "code":"INTERNAL_SERVER_ERROR",
                                  "detail":"Sorry, something has gone wrong at our end. If this persists please contact support."
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       },
       "securitySchemes":{
          "Client_auth_flow":{
             "type":"oauth2",
             "flows":{
                "clientCredentials":{
                   "tokenUrl":"/v0/auth/token",
                   "refreshUrl":"",
                   "scopes":{
                      
                   }
                }
             },
             "description":"Auth flow using client id and secret"
          },
          "Authorization_code_flow":{
             "type":"oauth2",
             "flows":{
                "authorizationCode":{
                   "authorizationUrl":"",
                   "tokenUrl":"",
                   "refreshUrl":"",
                   "scopes":{
                      
                   }
                }
             },
             "description":"Auth flow with a redirect containing a code"
          }
       }
    },
    "security":[
       {
          "Client_auth_flow":[
             "bank-fee:read",
             "payable:read",
             "payable-attachment:read",
             "settlement:read",
             "wallet-load:read",
             "wallet-summary:read",
             "user:read",
             "supplier:read"
          ]
       }
    ],
    "tags":[
       {
          "name":"Accounts"
       },
       {
          "name":"Approval Flows and Policies"
       },
       {
          "name":"Authentication"
       },
       {
          "name":"Expense Claims"
       },
       {
          "name":"Invoices"
       },
       {
          "name":"OAuth2"
       },
       {
          "name":"Payment Instruments"
       },
       {
          "name":"Physical Cards"
       },
       {
          "name":"Purchase Orders"
       },
       {
          "name":"Spend Data"
       },
       {
          "name":"Suppliers and Users"
       },
       {
          "name":"Virtual Cards"
       }
    ],
    "x-readme":{
       "explorer-enabled":true,
       "proxy-enabled":true,
       "samples-enabled":true
    }
 }